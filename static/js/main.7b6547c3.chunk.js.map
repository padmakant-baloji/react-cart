{"version":3,"sources":["components/caseone/Form.js","utils/validate.js","components/error/error.js","components/caseone/table/TableBody.js","components/caseone/table/TableHead.js","components/caseone/table/Table.js","conf/initialStates.js","conf/fields.js","conf/routes.js","containers/caseone/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","formData","handleChange","heading","fields","className","length","map","field","index","key","type","id","name","placeholder","label","value","onChange","evt","validMsg","isValid","msg","Validation","validCheck","match","validate","TableBody","row","indexValue","removeProduct","productId","productName","qty","unitPrice","totalPrice","disabled","note","onClick","TableHead","headings","Table","rows","states","caseone","billingAddress","firstName","lastName","addressLine1","addressLine2","city","state","zipcode","country","shippingAddress","cartData","orderDate","moment","format","toString","expectedDelivery","Date","shippingAddressFields","billingAddressFields","tableHeadings","emptyRow","notes","routes","path","component","handleShippingAddressChange","billishippingAddressngAddress","target","setState","handleBillingAddressChange","handleCartChange","changTotalAmount","parseFloat","addProductToCart","push","removeProductFromCart","splice","saveCartData","console","info","onDateChange","e","this","jsonData","Component","App","route","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b6547c3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = props => {\r\n  const { formData, handleChange, heading, fields } = props;\r\n  return (\r\n    <div className=\"caseone-form\">\r\n      {heading && <h4 className=\"form-heading\">{heading}</h4>}\r\n      <form>\r\n        {\r\n          fields && fields.length > 0 &&\r\n          (fields.map((field, index) => (\r\n            <input\r\n              key={index}\r\n              type=\"text\"\r\n              id={field.name}\r\n              name={field.name}\r\n              placeholder={field.label}\r\n              value={formData[field.name]}\r\n              onChange={evt => { handleChange(evt) }}\r\n            />\r\n          )))\r\n        }\r\n      </form>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","const validMsg = { isValid: true, msg: \"\" };\r\n/*\r\n * It will validate values with respect to its field\r\n * return object with properties isValid and msg\r\n * isValid : Boolean (true- if field is valid/false- if field is not valid)\r\n * msg : Error message for invalid fields.\r\n */\r\nexport const validate = (field, value) => {\r\n  if (field === \"productId\") {\r\n    if (!value) {\r\n      return {\r\n        isValid: false,\r\n        msg: \"Field can not be empty\"\r\n      };\r\n    }\r\n    if (!value.match(/^[0-9]*$/g)) {\r\n      return {\r\n        isValid: false,\r\n        msg: \"Enter only digits\"\r\n      };\r\n    }\r\n    if (!value.match(/\\b\\d{5,}\\b/g)) {\r\n      return {\r\n        isValid: false,\r\n        msg: \"Enter minimum 5 digits\"\r\n      };\r\n    }\r\n    if (!value.match(/\\b\\d{5,10}\\b/g)) {\r\n      return {\r\n        isValid: false,\r\n        msg: \"Enter maximum 10 digits\"\r\n      };\r\n    } else {\r\n      return validMsg;\r\n    }\r\n  } else if (field === \"productName\") {\r\n    if (!value) {\r\n      return {\r\n        isValid: false,\r\n        msg: \"Name can not be empty\"\r\n      };\r\n    }\r\n    if (value.length > 15) {\r\n      return {\r\n        isValid: false,\r\n        msg: \"Name must be max. 15 characters\"\r\n      };\r\n    }\r\n    return validMsg;\r\n  } else if (field === \"qty\") {\r\n    if (!value) {\r\n      return {\r\n        isValid: false,\r\n        msg: \"Field can not be empty\"\r\n      };\r\n    }\r\n    if (!value.match(/^[0-9]*$/)) {\r\n      return {\r\n        isValid: false,\r\n        msg: \"Enter only digits\"\r\n      };\r\n    } else {\r\n      return validMsg;\r\n    }\r\n  } else if (field === \"unitPrice\") {\r\n    if (!value) {\r\n      return {\r\n        isValid: false,\r\n        msg: \"Field can not be empty\"\r\n      };\r\n    }\r\n    if (!value.match(/^[+-]?\\d+(\\.\\d*)?$/)) {\r\n      return {\r\n        isValid: false,\r\n        msg: \"Enter only digits\"\r\n      };\r\n    } else {\r\n      return validMsg;\r\n    }\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { validate } from \"../../utils/validate\";\r\nconst Validation = props => {\r\n  const { field, value } = props;\r\n  const validCheck = validate(field, value);\r\n  return !validCheck.isValid ? (\r\n    <small className=\"caseone-error\">{validCheck.msg}</small>\r\n  ) : null;\r\n};\r\n\r\nexport default Validation;\r\n","import React from \"react\";\r\nimport Validation from \"../../../components/error/error\";\r\n\r\nconst TableBody = props => {\r\n  const { row, indexValue, handleChange, removeProduct } = props;\r\n  return (\r\n    <tbody className=\"caseone-cart\">\r\n      <tr>\r\n        <td>\r\n          <input\r\n            type=\"text\"\r\n            id=\"productId\"\r\n            name=\"productId\"\r\n            placeholder=\"ProductId\"\r\n            onChange={evt => handleChange(evt, indexValue)}\r\n            value={row.productId}\r\n          />\r\n          <button className=\"caseone-button\">\r\n            <i className=\"fa fa-arrows-h caseone-icon\"></i>\r\n          </button>\r\n          <Validation field=\"productId\" value={row.productId} />\r\n        </td>\r\n        <td>\r\n          <input\r\n            type=\"text\"\r\n            id=\"productName\"\r\n            name=\"productName\"\r\n            placeholder=\"ProductName\"\r\n            onChange={evt => handleChange(evt, indexValue)}\r\n            value={row.productName}\r\n          />\r\n          <Validation field=\"productName\" value={row.productName} />\r\n        </td>\r\n        <td>\r\n          <input\r\n            type=\"text\"\r\n            id=\"qty\"\r\n            name=\"qty\"\r\n            placeholder=\"qty\"\r\n            onChange={evt => handleChange(evt, indexValue, true)}\r\n            value={row.qty}\r\n          />\r\n          <Validation field=\"qty\" value={row.qty} />\r\n        </td>\r\n        <td>\r\n          <input\r\n            type=\"text\"\r\n            id=\"unitPrice\"\r\n            name=\"unitPrice\"\r\n            placeholder=\"Unit Price\"\r\n            onChange={evt => handleChange(evt, indexValue, true)}\r\n            value={row.unitPrice}\r\n          />\r\n          <Validation field=\"unitPrice\" value={row.unitPrice} />\r\n        </td>\r\n        <td>\r\n          <input\r\n            type=\"text\"\r\n            id=\"totalPrice\"\r\n            name=\"totalPrice\"\r\n            placeholder=\"Total Price\"\r\n            value={row.totalPrice}\r\n            disabled\r\n          />\r\n        </td>\r\n        <td>\r\n          <textarea\r\n            type=\"text\"\r\n            id=\"notes\"\r\n            name=\"notes\"\r\n            placeholder=\"Notes\"\r\n            onChange={evt => handleChange(evt, indexValue)}\r\n            value={row.note}\r\n          ></textarea>\r\n        </td>\r\n        <td>\r\n          <button\r\n            className=\"caseon-delete\"\r\n            onClick={() => removeProduct(indexValue)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","import React from \"react\";\r\nconst TableHead = props => {\r\n  const { headings } = props;\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {headings.map((heading, index) => (\r\n          <th key={index}> {heading}</th>\r\n        ))}\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default TableHead;\r\n","import React from \"react\";\r\nimport TableBody from \"./TableBody\";\r\nimport TableHead from \"./TableHead\";\r\n\r\nconst Table = props => {\r\n  const { headings, rows, handleChange, removeProduct } = props;\r\n  return (\r\n    <div>\r\n      <table className=\"table\">\r\n        <TableHead headings={headings} />\r\n        {rows.map((row, index) => (\r\n          <TableBody\r\n            key={index}\r\n            row={row}\r\n            indexValue={index}\r\n            handleChange={handleChange}\r\n            removeProduct={removeProduct}\r\n          />\r\n        ))}\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\nexport default Table;\r\n","import moment from \"moment\";\r\n/*\r\n * Initial component states.\r\n */\r\nexport const states = {\r\n  caseone: {\r\n    billingAddress: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      addressLine1: \"\",\r\n      addressLine2: \"\",\r\n      city: \"\",\r\n      state: \"\",\r\n      zipcode: \"\",\r\n      country: \"\"\r\n    },\r\n    shippingAddress: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      addressLine1: \"\",\r\n      addressLine2: \"\",\r\n      city: \"\",\r\n      state: \"\",\r\n      zipcode: \"\",\r\n      country: \"\"\r\n    },\r\n    cartData: [],\r\n    orderDate: moment().format(\"YYYY-MM-DD\").toString(),\r\n    expectedDelivery: new Date()\r\n  }\r\n};\r\n","/*\r\n * Fields for shipping address form\r\n * name: id value for field\r\n * label: Place holder for the field.\r\n */\r\nexport const shippingAddressFields = [\r\n  {\r\n    name: \"firstName\",\r\n    label: \"First Name\"\r\n  },\r\n  {\r\n    name: \"lastName\",\r\n    label: \"Last Name\"\r\n  },\r\n  {\r\n    name: \"addressLine1\",\r\n    label: \"Address Line 1\"\r\n  },\r\n  {\r\n    name: \"addressLine2\",\r\n    label: \"Address Line 2\"\r\n  },\r\n  {\r\n    name: \"city\",\r\n    label: \"City\"\r\n  },\r\n  {\r\n    name: \"state\",\r\n    label: \"State\"\r\n  },\r\n  {\r\n    name: \"zipcode\",\r\n    label: \"Zipcode\"\r\n  },\r\n  {\r\n    name: \"country\",\r\n    label: \"Country\"\r\n  }\r\n];\r\n/*\r\n * Fields for billing address form\r\n * name: id value for field\r\n * label: Place holder for the field.\r\n */\r\n\r\nexport const billingAddressFields = [\r\n  {\r\n    name: \"firstName\",\r\n    label: \"First Name\"\r\n  },\r\n  {\r\n    name: \"lastName\",\r\n    label: \"Last Name\"\r\n  },\r\n  {\r\n    name: \"addressLine1\",\r\n    label: \"Address Line 1\"\r\n  },\r\n  {\r\n    name: \"addressLine2\",\r\n    label: \"Address Line 2\"\r\n  },\r\n  {\r\n    name: \"city\",\r\n    label: \"City\"\r\n  },\r\n  {\r\n    name: \"state\",\r\n    label: \"State\"\r\n  },\r\n  {\r\n    name: \"zipcode\",\r\n    label: \"Zipcode\"\r\n  },\r\n  {\r\n    name: \"country\",\r\n    label: \"Country\"\r\n  }\r\n];\r\n\r\n/*\r\n * Cart table heading fields\r\n */\r\n\r\nexport const tableHeadings = [\r\n  \"Product ID\",\r\n  \"Product Name\",\r\n  \"QTY\",\r\n  \"Unit Price\",\r\n  \"Total Price\",\r\n  \"Notes\",\r\n  \".\"\r\n];\r\n/*\r\n * Empty cart object to add new row to cart\r\n */\r\nexport const emptyRow = {\r\n  productId: \"\",\r\n  productName: \"\",\r\n  qty: \"\",\r\n  unitPrice: \"\",\r\n  totalPrice: \"0\",\r\n  notes: \"\"\r\n};\r\n","import Caseone from \"../containers/caseone\";\r\n\r\nexport const routes = [{ path: \"/\", component: Caseone }];\r\n","import React, { Component } from \"react\";\r\nimport moment from \"moment\";\r\nimport Form from \"../../components/caseone/Form\";\r\nimport Table from \"../../components/caseone/table/Table\";\r\nimport { states } from \"../../conf/initialStates\";\r\nimport {\r\n  shippingAddressFields,\r\n  billingAddressFields,\r\n  tableHeadings,\r\n  emptyRow\r\n} from \"../../conf/fields\";\r\nimport jsonData from \"../../conf/form-data.json\";\r\n\r\nexport default class Caseone extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ...states.caseone\r\n    };\r\n  }\r\n  /*\r\n   * handleShippingAddressChange\r\n   * It will update shipping address form fields.\r\n   */\r\n  handleShippingAddressChange = evt => {\r\n    const shippingAddress = {\r\n      ...this.state.billishippingAddressngAddress,\r\n      [evt.target.name]: evt.target.value\r\n    };\r\n    this.setState({\r\n      shippingAddress\r\n    });\r\n  };\r\n  /*\r\n   * handleBillingAddressChange\r\n   * It will update billing address form fields.\r\n   */\r\n  handleBillingAddressChange = evt => {\r\n    const billingAddress = {\r\n      ...this.state.billingAddress,\r\n      [evt.target.name]: evt.target.value\r\n    };\r\n    this.setState({\r\n      billingAddress\r\n    });\r\n  };\r\n\r\n  /*\r\n   * handleCartChange\r\n   * It will handle data change in cart fields.\r\n   */\r\n  handleCartChange = (evt, id, changTotalAmount) => {\r\n    const cartData = [...this.state.cartData];\r\n    cartData[id][evt.target.name] = evt.target.value;\r\n\r\n    if (changTotalAmount) {\r\n      if (cartData[id].totalPrice && cartData[id].unitPrice) {\r\n        cartData[id].totalPrice = (\r\n          parseFloat(cartData[id].qty) * parseFloat(cartData[id].unitPrice)\r\n        ).toString();\r\n      }\r\n    }\r\n    this.setState({\r\n      cartData\r\n    });\r\n  };\r\n\r\n  /*\r\n   * addProductToCart\r\n   * It will insert new empty row to cart array.\r\n   */\r\n  addProductToCart = () => {\r\n    const cartData = [...this.state.cartData];\r\n    cartData.push({ ...emptyRow });\r\n    this.setState({\r\n      cartData\r\n    });\r\n  };\r\n\r\n  /*\r\n   * removeProductFromCart\r\n   * It will remove row from the cart array.\r\n   */\r\n  removeProductFromCart = index => {\r\n    const cartData = [...this.state.cartData];\r\n    cartData.splice(index, 1);\r\n    this.setState({\r\n      cartData\r\n    });\r\n  };\r\n  /*\r\n   * saveCartData\r\n   * It will log all the data to browsers console.\r\n   */\r\n  saveCartData = () => {\r\n    console.info(\"Data is ::::::::: \", this.state);\r\n  };\r\n  /*\r\n   * onDateChange\r\n   * It will update the state for oredr date and expected delivery date.\r\n   */\r\n  onDateChange = e => {\r\n    this.setState({\r\n      [e.target.name]: moment(e.target.value)\r\n        .format(\"YYYY-MM-DD\")\r\n        .toString()\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      ...this.state,\r\n      billingAddress: jsonData.billingAddress,\r\n      shippingAddress: jsonData.shippingAddress,\r\n      cartData: jsonData.cartData\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      billingAddress,\r\n      shippingAddress,\r\n      cartData,\r\n      orderDate,\r\n      expectedDelivery\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"main-container\">\r\n        <div className=\"caseone-card\">\r\n          <div className=\"row\">\r\n            <div className=\"col col-md-4 col-lg-4\">\r\n              {/*\r\n               * It will take fields from src/conf/fields\r\n               * Add new field to billingAddress variable\r\n               * eg. {name:\"idForField\", label:\"labelForField\"}\r\n               */}\r\n              <Form\r\n                heading=\"Billing Address\"\r\n                formData={billingAddress}\r\n                handleChange={this.handleBillingAddressChange}\r\n                fields={billingAddressFields}\r\n              />\r\n              <div className=\"datePicker\">\r\n                <h5 className=\"form-heading\">Oder Date</h5>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"orderDate\"\r\n                  id=\"orderDate\"\r\n                  value={orderDate}\r\n                  onChange={e => this.onDateChange(e)}\r\n                ></input>\r\n              </div>\r\n            </div>\r\n            <div className=\"col col-md-4 col-lg-4\">\r\n              {/*\r\n               * It will take fields from src/conf/fields\r\n               * Add new field to shippingAddress variable\r\n               * eg. {name:\"idForField\", label:\"labelForField\"}\r\n               */}\r\n              <Form\r\n                heading=\"Shipping Address\"\r\n                formData={shippingAddress}\r\n                handleChange={this.handleShippingAddressChange}\r\n                fields={shippingAddressFields}\r\n              />\r\n              <div className=\"datePicker\">\r\n                <h5 className=\"form-heading\">Expected Delivery</h5>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"expectedDelivery\"\r\n                  id=\"expectedDelivery\"\r\n                  value={expectedDelivery}\r\n                  onChange={e => this.onDateChange(e)}\r\n                ></input>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"caseone-card\">\r\n          {/*\r\n           * It will render Table\r\n           * It  takes table headings  from src/conf/fields; var name 'tableHeadings'\r\n           */}\r\n          <Table\r\n            headings={tableHeadings}\r\n            rows={cartData}\r\n            handleChange={this.handleCartChange}\r\n            removeProduct={this.removeProductFromCart}\r\n          />\r\n          <div>\r\n            <button className=\"caseone-add\" onClick={this.addProductToCart}>\r\n              ADD PRODUCT\r\n            </button>\r\n\r\n            <button className=\"caseone-save\" onClick={this.saveCartData}>\r\n              SAVE\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport {routes} from './conf/routes';\nimport \"./styles/root.scss\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n          {routes.map((route) => (\n            <Route\n              key={route.path}\n              path={route.path}\n              component={route.component}\n            />\n          ))}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}